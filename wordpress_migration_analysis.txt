# WordPress to Payload CMS Migration Plugin Analysis

## Overview

This document analyzes the requirements and implementation steps for creating a WordPress to Payload CMS migration plugin with two key approaches:

1. **Migration Option**: Connect to a WordPress database and migrate WordPress tables to Payload's PostgreSQL data structure.
2. **Direct Adapter Option**: Create a database adapter that allows Payload to use an existing WordPress database directly.

## WordPress Database Structure

WordPress uses a standardized MySQL/MariaDB database structure with these core tables:

### Key WordPress Tables
- **wp_posts**: Core content table storing posts, pages, attachments, revisions, and custom post types
  - Key fields: ID, post_author, post_title, post_content, post_excerpt, post_status, post_type, post_date
- **wp_postmeta**: Metadata for posts with key-value pairs
  - Key fields: meta_id, post_id, meta_key, meta_value
- **wp_users**: User account information
  - Key fields: ID, user_login, user_pass, user_email, display_name
- **wp_usermeta**: User metadata
  - Key fields: umeta_id, user_id, meta_key, meta_value
- **wp_terms**: Categories and tags
- **wp_term_relationships**: Connections between posts and terms
- **wp_term_taxonomy**: Taxonomy information for terms
- **wp_comments**: Comment data
- **wp_commentmeta**: Comment metadata
- **wp_options**: Site settings and configuration

## Payload CMS Database Structure

Payload CMS is database-agnostic and works through adapters. Currently it supports:
- MongoDB (document-based approach)
- PostgreSQL (relational approach using Drizzle ORM)
- SQLite (relational approach using Drizzle ORM)

Each adapter handles how Payload's collections, fields, and relationships map to database structures.

## Implementation Approach 1: Migration Plugin

### Requirements
1. WordPress data access component
2. Payload CMS data import component
3. Mapping configuration
4. Migration UI
5. Progress tracking
6. Error handling

### Implementation Steps

#### 1. Plugin Setup
```typescript
// Plugin structure setup
import type { Config } from 'payload';

export interface WordPressMigratorOptions {
  enabled?: boolean;
  wpDatabaseConfig?: {
    host: string;
    user: string;
    password: string;
    database: string;
    port?: number;
  };
  postTypeMapping?: Record<string, string>;
  taxonomyMapping?: Record<string, string>;
  mediaHandling?: 'copy' | 'reference';
  batchSize?: number;
}

export const wordpressMigratorPlugin = (options: WordPressMigratorOptions = {}) => (incomingConfig: Config): Config => {
  // Plugin implementation
  const config = { ...incomingConfig };
  
  // Set defaults
  const pluginOptions: Required<WordPressMigratorOptions> = {
    enabled: options.enabled ?? true,
    wpDatabaseConfig: options.wpDatabaseConfig ?? null,
    postTypeMapping: options.postTypeMapping ?? {},
    taxonomyMapping: options.taxonomyMapping ?? {},
    mediaHandling: options.mediaHandling ?? 'copy',
    batchSize: options.batchSize ?? 100,
  };
  
  if (!pluginOptions.enabled) return config;
  
  // Set up admin UI routes and API endpoints
  if (config.admin) {
    config.admin.components = config.admin.components || {};
    config.admin.components.beforeDashboard = [
      ...(config.admin.components.beforeDashboard || []),
      'payload-wordpress-migrator/components/MigrationPanel',
    ];
  }
  
  // Add plugin routes
  config.endpoints = [
    ...(config.endpoints || []),
    {
      path: '/wordpress-migrator/connect',
      method: 'post',
      handler: connectToWordPressHandler,
    },
    {
      path: '/wordpress-migrator/mapping',
      method: 'post',
      handler: updateMappingHandler,
    },
    {
      path: '/wordpress-migrator/start',
      method: 'post',
      handler: startMigrationHandler,
    },
    {
      path: '/wordpress-migrator/status',
      method: 'get',
      handler: getMigrationStatusHandler,
    },
  ];
  
  return config;
};
```

#### 2. WordPress Database Connection

```typescript
// Connect to WordPress database
import mysql from 'mysql2/promise';
import type { PayloadRequest } from 'payload/types';

export const connectToWordPressHandler = async (req: PayloadRequest, res: Response): Promise<void> => {
  const { host, user, password, database, port } = req.body;
  
  try {
    // Create a connection
    const connection = await mysql.createConnection({
      host,
      user,
      password,
      database,
      port: port || 3306,
    });
    
    // Test connection
    await connection.connect();
    
    // Get WordPress database structure
    const [postTypes] = await connection.execute('SELECT DISTINCT post_type FROM wp_posts');
    const [taxonomies] = await connection.execute('SELECT DISTINCT taxonomy FROM wp_term_taxonomy');
    
    // Store connection info in payload preferences
    await req.payload.update({
      collection: 'payload-preferences',
      id: req.user.id,
      data: {
        'wordpress-migrator': {
          connection: { host, user, password, database, port },
          postTypes,
          taxonomies,
        },
      },
    });
    
    await connection.end();
    
    res.status(200).json({
      message: 'Successfully connected to WordPress database',
      postTypes,
      taxonomies,
    });
  } catch (error) {
    res.status(500).json({
      message: 'Failed to connect to WordPress database',
      error: error.message,
    });
  }
};
```

#### 3. Mapping Logic

```typescript
// Map WordPress schema to Payload schema
const mapWordPressToPayload = async (wpConnection, payloadClient, mapping) => {
  // Map WordPress post types to Payload collections
  for (const [wpPostType, payloadCollection] of Object.entries(mapping.postTypes)) {
    // Get posts
    const [posts] = await wpConnection.execute(
      'SELECT * FROM wp_posts WHERE post_type = ? AND post_status = "publish"',
      [wpPostType]
    );
    
    // For each post
    for (const post of posts) {
      // Get post meta
      const [meta] = await wpConnection.execute(
        'SELECT meta_key, meta_value FROM wp_postmeta WHERE post_id = ?',
        [post.ID]
      );
      
      // Convert to Payload format
      const payloadDoc = {
        title: post.post_title,
        content: post.post_content,
        excerpt: post.post_excerpt,
        status: post.post_status === 'publish' ? 'published' : 'draft',
        createdAt: post.post_date,
        updatedAt: post.post_modified,
        // Map metadata
        ...meta.reduce((acc, { meta_key, meta_value }) => {
          if (mapping.metaFields[meta_key]) {
            acc[mapping.metaFields[meta_key]] = meta_value;
          }
          return acc;
        }, {}),
      };
      
      // Create in Payload
      await payloadClient.create({
        collection: payloadCollection,
        data: payloadDoc,
      });
    }
  }
};
```

#### 4. Media Handling

```typescript
// Handle WordPress media
const migrateMedia = async (wpConnection, payloadClient, options) => {
  // Get attachments
  const [attachments] = await wpConnection.execute(
    'SELECT * FROM wp_posts WHERE post_type = "attachment"'
  );
  
  // For each attachment
  for (const attachment of attachments) {
    // Get attachment meta
    const [meta] = await wpConnection.execute(
      'SELECT meta_key, meta_value FROM wp_postmeta WHERE post_id = ? AND meta_key IN ("_wp_attached_file", "_wp_attachment_metadata")',
      [attachment.ID]
    );
    
    const filePath = meta.find(m => m.meta_key === '_wp_attached_file')?.meta_value;
    
    if (filePath && options.mediaHandling === 'copy') {
      // Copy file from WordPress uploads to Payload uploads
      const wpFilePath = `${wpUploadsDir}/${filePath}`;
      
      // Upload to Payload
      await payloadClient.create({
        collection: 'media',
        data: {
          alt: attachment.post_title || '',
        },
        file: wpFilePath,
      });
    }
  }
};
```

#### 5. User Migration

```typescript
// Migrate WordPress users
const migrateUsers = async (wpConnection, payloadClient) => {
  // Get users
  const [users] = await wpConnection.execute('SELECT * FROM wp_users');
  
  // For each user
  for (const user of users) {
    // Get user meta
    const [meta] = await wpConnection.execute(
      'SELECT meta_key, meta_value FROM wp_usermeta WHERE user_id = ?',
      [user.ID]
    );
    
    // Create in Payload
    await payloadClient.create({
      collection: 'users',
      data: {
        email: user.user_email,
        password: 'TEMPORARY_PASSWORD', // Would require reset
        name: user.display_name,
      },
    });
  }
};
```

#### 6. Admin UI Components

Create React components for the admin panel to:
- Configure database connection
- Define field mappings
- Start/monitor migration process
- Show results and error logs

## Implementation Approach 2: WordPress Database Adapter

This approach creates a custom database adapter that allows Payload to use WordPress's database structure directly.

### Requirements
1. Implement a database adapter interface
2. Map Payload operations to WordPress database operations
3. Handle relationships and field types
4. Handle authentication

### Implementation Steps

#### 1. Database Adapter Structure

```typescript
// WordPress database adapter for Payload
import type { DatabaseAdapter } from 'payload/database';
import mysql from 'mysql2/promise';

export interface WordPressAdapterOptions {
  host: string;
  user: string;
  password: string;
  database: string;
  port?: number;
  prefix?: string; // WordPress table prefix, default 'wp_'
  postTypeMapping?: Record<string, string>; // Map Payload collections to WP post types
}

export const wordpressAdapter = (options: WordPressAdapterOptions): DatabaseAdapter => {
  // Set defaults
  const config = {
    port: options.port || 3306,
    prefix: options.prefix || 'wp_',
    postTypeMapping: options.postTypeMapping || {},
  };
  
  // Create a pool
  const pool = mysql.createPool({
    host: options.host,
    user: options.user,
    password: options.password,
    database: options.database,
    port: config.port,
  });
  
  // Implement the adapter interface
  return {
    // Connect to database
    async connect() {
      // Test connection
      await pool.getConnection();
      return null;
    },
    
    // Find documents
    async find({ collection, query, ...rest }) {
      const postType = config.postTypeMapping[collection] || collection;
      
      // Convert Payload query to SQL
      const { where, sort, limit, skip } = query;
      
      // Build SQL query
      const sqlQuery = `
        SELECT p.*, pm.meta_key, pm.meta_value 
        FROM ${config.prefix}posts p
        LEFT JOIN ${config.prefix}postmeta pm ON p.ID = pm.post_id
        WHERE p.post_type = ?
        ${buildWhere(where)}
        ${buildOrderBy(sort)}
        LIMIT ? OFFSET ?
      `;
      
      // Execute query
      const [rows] = await pool.execute(sqlQuery, [postType, limit, skip]);
      
      // Format results to match Payload expectations
      return formatPostResults(rows, collection);
    },
    
    // Create document
    async create({ collection, data }) {
      const postType = config.postTypeMapping[collection] || collection;
      
      // Separate post data from meta data
      const { title, content, status, ...metaData } = data;
      
      // Insert post
      const [result] = await pool.execute(
        `INSERT INTO ${config.prefix}posts (post_title, post_content, post_status, post_type) VALUES (?, ?, ?, ?)`,
        [title, content, status === 'published' ? 'publish' : 'draft', postType]
      );
      
      const postId = result.insertId;
      
      // Insert meta data
      for (const [key, value] of Object.entries(metaData)) {
        await pool.execute(
          `INSERT INTO ${config.prefix}postmeta (post_id, meta_key, meta_value) VALUES (?, ?, ?)`,
          [postId, key, typeof value === 'object' ? JSON.stringify(value) : value]
        );
      }
      
      // Return created document
      const [created] = await pool.execute(
        `SELECT * FROM ${config.prefix}posts WHERE ID = ?`,
        [postId]
      );
      
      return formatPostResult(created[0], collection);
    },
    
    // Other required methods:
    // findOne, findByID, update, delete, etc.
    
    // Custom utilities for this adapter
    tables: {
      posts: `${config.prefix}posts`,
      postmeta: `${config.prefix}postmeta`,
      users: `${config.prefix}users`,
      usermeta: `${config.prefix}usermeta`,
      terms: `${config.prefix}terms`,
      term_relationships: `${config.prefix}term_relationships`,
      term_taxonomy: `${config.prefix}term_taxonomy`,
    },
  };
};

// Helper to format WordPress posts to Payload documents
function formatPostResults(posts, collection) {
  // Group by post ID
  const postMap = {};
  
  posts.forEach(row => {
    if (!postMap[row.ID]) {
      postMap[row.ID] = {
        id: row.ID,
        title: row.post_title,
        content: row.post_content,
        status: row.post_status === 'publish' ? 'published' : 'draft',
        createdAt: row.post_date,
        updatedAt: row.post_modified,
        meta: {},
      };
    }
    
    // Add meta data
    if (row.meta_key && row.meta_value) {
      postMap[row.ID].meta[row.meta_key] = row.meta_value;
    }
  });
  
  return Object.values(postMap);
}
```

#### 2. Authentication Implementation

```typescript
// Handle WordPress user authentication
export const wordpressAuthenticationHandler = async ({ req, res, next }) => {
  const { email, password } = req.body;
  
  try {
    // Find user by email
    const [users] = await pool.execute(
      `SELECT * FROM ${config.prefix}users WHERE user_email = ?`,
      [email]
    );
    
    if (users.length === 0) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }
    
    const user = users[0];
    
    // Verify password using WordPress password hash
    const verified = await verifyWPPassword(password, user.user_pass);
    
    if (!verified) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }
    
    // Set user on request for Payload
    req.user = {
      id: user.ID,
      email: user.user_email,
      collection: 'users',
    };
    
    return next();
  } catch (error) {
    return res.status(500).json({ message: 'Authentication error', error: error.message });
  }
};

// Helper to verify WordPress password
async function verifyWPPassword(password, hash) {
  // Implementation of WordPress password verification
  // Would need to use phpass or similar library
}
```

#### 3. Field Type Mapping

```typescript
// Map Payload field types to WordPress data structures
const mapPayloadFieldToWordPress = (field, value) => {
  switch (field.type) {
    case 'text':
    case 'textarea':
    case 'email':
    case 'code':
    case 'json':
      // Store as meta field
      return { key: field.name, value: String(value) };
      
    case 'number':
      return { key: field.name, value: String(value) };
      
    case 'checkbox':
      return { key: field.name, value: value ? '1' : '0' };
      
    case 'date':
      return { key: field.name, value: value.toISOString() };
      
    case 'richText':
      // Store rich text as serialized format
      return { key: field.name, value: JSON.stringify(value) };
      
    case 'array':
    case 'blocks':
      // Store complex data as serialized JSON
      return { key: field.name, value: JSON.stringify(value) };
      
    case 'relationship':
      // Handle relationships by storing related IDs
      if (Array.isArray(value)) {
        return { key: field.name, value: JSON.stringify(value.map(v => v.id || v)) };
      }
      return { key: field.name, value: value?.id || value || '' };
      
    default:
      // Store unknown types as serialized JSON
      return { key: field.name, value: JSON.stringify(value) };
  }
};
```

## Comparison of Approaches

### Migration Plugin
- **Pros**:
  - Clean database design using Payload's native structure
  - Better performance with proper indexes and relations
  - Full compatibility with Payload features
  - One-time migration, then no dependency on WordPress
- **Cons**:
  - More complex to implement
  - Requires a separate migration process
  - Potential data loss or inconsistencies during migration

### WordPress Database Adapter
- **Pros**:
  - Work with existing WordPress data without modification
  - No migration required
  - Preserve all WordPress application functionality
  - Easier transition for existing WordPress sites
- **Cons**:
  - Performance limitations due to WordPress schema design
  - Potential incompatibility with some Payload features
  - Complex mapping between different data models
  - Ongoing maintenance to keep up with both systems

## Recommended Implementation Strategy

A phased approach:

1. Start with the migration plugin to enable existing WordPress sites to move to Payload CMS
2. Begin with core WordPress content types (posts, pages, users)
3. Add support for media files and taxonomies
4. Develop the WordPress database adapter as a second phase for sites that need to maintain WordPress compatibility

For maximum flexibility, implement both options but clearly document the trade-offs to users.

## Technical Considerations

1. **Data Integrity**: Ensure that relationships between content are preserved
2. **Password Handling**: WordPress uses specific password hashing that needs to be respected
3. **Media Files**: WordPress stores media paths in the database, but files are in wp-content/uploads
4. **Custom Post Types**: Handle mapping of custom post types to Payload collections
5. **Plugin/Theme Data**: Consider how to handle data added by WordPress plugins 
6. **Performance**: Large WordPress sites may require batched processing
7. **Testing**: Comprehensive testing with various WordPress configurations

## Conclusion

Creating a WordPress to Payload CMS migration solution is feasible with either approach. The migration plugin offers the cleanest long-term solution, while the database adapter provides the easiest transition path. Ideally, implementing both would give users maximum flexibility based on their specific needs. 